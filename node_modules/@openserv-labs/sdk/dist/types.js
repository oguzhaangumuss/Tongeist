"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilesParamsSchema = exports.actionSchema = exports.respondChatMessageActionSchema = exports.doTaskActionSchema = exports.taskStatusSchema = exports.agentKind = void 0;
const zod_1 = require("zod");
const zod_to_openapi_1 = require("@asteasolutions/zod-to-openapi");
(0, zod_to_openapi_1.extendZodWithOpenApi)(zod_1.z);
exports.agentKind = zod_1.z.enum(['external', 'eliza', 'openserv']);
exports.taskStatusSchema = zod_1.z
    .enum(['to-do', 'in-progress', 'human-assistance-required', 'error', 'done', 'cancelled'])
    .openapi('taskStatusSchema');
const projectManagerPlanReviewHumanAssistanceQuestionSchema = zod_1.z.object({
    tasks: zod_1.z.array(zod_1.z.object({
        index: zod_1.z.number(),
        assigneeAgentId: zod_1.z.number().int(),
        assigneeAgentName: zod_1.z.string(),
        taskDescription: zod_1.z.string(),
        taskBody: zod_1.z.string(),
        input: zod_1.z.string(),
        expectedOutput: zod_1.z.string()
    }))
});
const baseHumanAssistanceRequestSchema = zod_1.z.discriminatedUnion('type', [
    zod_1.z
        .object({
        type: zod_1.z.literal('text'),
        question: zod_1.z.object({
            type: zod_1.z.literal('text'),
            question: zod_1.z.string().trim().min(1).openapi({ description: 'Your question for the user' })
        })
    })
        .openapi({
        description: "The type is 'text' and the question is a known object. This is what your agents will typically use."
    }),
    zod_1.z.object({
        type: zod_1.z.literal('project-manager-plan-review'),
        question: projectManagerPlanReviewHumanAssistanceQuestionSchema.extend({
            type: zod_1.z.literal('project-manager-plan-review')
        })
    }),
    zod_1.z.object({
        type: zod_1.z.literal('insufficient-balance'),
        question: zod_1.z.object({
            type: zod_1.z.literal('insufficient-balance')
        })
    }),
    zod_1.z.object({
        type: zod_1.z.literal('json'),
        question: zod_1.z.any()
    })
]);
exports.doTaskActionSchema = zod_1.z
    .object({
    type: zod_1.z.literal('do-task'),
    me: zod_1.z
        .intersection(zod_1.z.object({
        id: zod_1.z.number(),
        name: zod_1.z.string(),
        kind: exports.agentKind
    }), zod_1.z
        .union([
        zod_1.z.object({
            isBuiltByAgentBuilder: zod_1.z.literal(false)
        }),
        zod_1.z.object({
            isBuiltByAgentBuilder: zod_1.z.literal(true),
            systemPrompt: zod_1.z.string()
        })
    ])
        .openapi({
        description: 'This information is for internal agents only'
    }))
        .openapi({ description: 'Your agent instance' }),
    task: zod_1.z.object({
        id: zod_1.z.number().openapi({ description: 'The ID of the task' }),
        description: zod_1.z.string().openapi({
            description: "Short description of the task. Usually in the format of 'Do [something]'"
        }),
        body: zod_1.z.string().nullish().openapi({
            description: 'Additional task information or data. Usually 2-3 sentences if available.'
        }),
        expectedOutput: zod_1.z.string().nullish().openapi({ description: 'Preferred output of the task' }),
        input: zod_1.z.string().nullish().openapi({
            description: "The input information for the task. Typically, it's an output of another task."
        }),
        dependencies: zod_1.z
            .array(zod_1.z.object({
            id: zod_1.z.number(),
            description: zod_1.z.string(),
            output: zod_1.z.string().nullish(),
            status: exports.taskStatusSchema,
            attachments: zod_1.z.array(zod_1.z.object({
                id: zod_1.z.number(),
                path: zod_1.z.string(),
                fullUrl: zod_1.z.string(),
                summary: zod_1.z.string().nullish()
            }))
        }))
            .openapi({ description: 'List of dependant tasks' }),
        humanAssistanceRequests: zod_1.z.array(zod_1.z.intersection(baseHumanAssistanceRequestSchema, zod_1.z
            .object({
            agentDump: zod_1.z.unknown().openapi({
                description: "Agent's internal data. Anything the agent wanted to store in the context of this human assistant request."
            }),
            humanResponse: zod_1.z
                .string()
                .nullish()
                .openapi({ description: "Human's response to the question" }),
            id: zod_1.z.number(),
            status: zod_1.z.enum(['pending', 'responded'])
        })
            .openapi({ description: 'List of Human Assistance Requests' })))
    }),
    workspace: zod_1.z.object({
        id: zod_1.z.number(),
        goal: zod_1.z.string(),
        bucket_folder: zod_1.z.string(),
        agents: zod_1.z.array(zod_1.z.object({
            id: zod_1.z.number(),
            name: zod_1.z.string(),
            capabilities_description: zod_1.z.string()
        }))
    }),
    integrations: zod_1.z.array(zod_1.z.object({
        id: zod_1.z.number(),
        connection_id: zod_1.z.string(),
        provider_config_key: zod_1.z.string(),
        provider: zod_1.z.string(),
        created: zod_1.z.string(),
        metadata: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()).nullish(),
        scopes: zod_1.z.array(zod_1.z.string()).optional(),
        openAPI: zod_1.z.object({
            title: zod_1.z.string(),
            description: zod_1.z.string()
        })
    })),
    memories: zod_1.z.array(zod_1.z.object({
        id: zod_1.z.number(),
        memory: zod_1.z.string(),
        createdAt: zod_1.z.coerce.date()
    }))
})
    .openapi('doTaskActionSchema');
exports.respondChatMessageActionSchema = zod_1.z
    .object({
    type: zod_1.z.literal('respond-chat-message'),
    me: zod_1.z.intersection(zod_1.z.object({
        id: zod_1.z.number(),
        name: zod_1.z.string(),
        kind: exports.agentKind
    }), zod_1.z.discriminatedUnion('isBuiltByAgentBuilder', [
        zod_1.z.object({
            isBuiltByAgentBuilder: zod_1.z.literal(false)
        }),
        zod_1.z.object({
            isBuiltByAgentBuilder: zod_1.z.literal(true),
            systemPrompt: zod_1.z.string()
        })
    ])),
    messages: zod_1.z.array(zod_1.z.object({
        author: zod_1.z.enum(['agent', 'user']),
        createdAt: zod_1.z.coerce.date(),
        id: zod_1.z.number(),
        message: zod_1.z.string()
    })),
    workspace: zod_1.z.object({
        id: zod_1.z.number(),
        goal: zod_1.z.string(),
        bucket_folder: zod_1.z.string(),
        agents: zod_1.z.array(zod_1.z.object({
            id: zod_1.z.number(),
            name: zod_1.z.string(),
            capabilities_description: zod_1.z.string()
        }))
    }),
    integrations: zod_1.z.array(zod_1.z.object({
        id: zod_1.z.number(),
        connection_id: zod_1.z.string(),
        provider_config_key: zod_1.z.string(),
        provider: zod_1.z.string(),
        created: zod_1.z.string().optional(),
        metadata: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()).nullish().optional(),
        scopes: zod_1.z.array(zod_1.z.string()).optional(),
        openAPI: zod_1.z.object({
            title: zod_1.z.string(),
            description: zod_1.z.string()
        })
    })),
    memories: zod_1.z.array(zod_1.z.object({
        id: zod_1.z.number(),
        memory: zod_1.z.string(),
        createdAt: zod_1.z.coerce.date()
    }))
})
    .openapi('respondChatMessageActionSchema');
exports.actionSchema = zod_1.z.discriminatedUnion('type', [
    exports.doTaskActionSchema,
    exports.respondChatMessageActionSchema
]);
const agentChatMessagesResponseSchema = zod_1.z.object({
    agent: zod_1.z.object({
        id: zod_1.z.number(),
        name: zod_1.z.string()
    }),
    messages: zod_1.z.array(zod_1.z.object({
        author: zod_1.z.enum(['agent', 'user']),
        createdAt: zod_1.z.coerce.date(),
        id: zod_1.z.number(),
        message: zod_1.z.string()
    }))
});
exports.getFilesParamsSchema = zod_1.z.object({
    workspaceId: zod_1.z.number().int().positive()
});
