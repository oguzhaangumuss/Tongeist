import { z } from 'zod';
import type { ChatCompletionMessageParam } from 'openai/resources/chat/completions';
export type CapabilityFuncParams<Schema extends z.ZodTypeAny> = {
    args: z.infer<Schema>;
    action?: z.infer<typeof actionSchema>;
};
export declare const agentKind: z.ZodEnum<["external", "eliza", "openserv"]>;
export declare const taskStatusSchema: z.ZodEnum<["to-do", "in-progress", "human-assistance-required", "error", "done", "cancelled"]>;
export type TaskStatus = z.infer<typeof taskStatusSchema>;
export declare const doTaskActionSchema: z.ZodObject<{
    type: z.ZodLiteral<"do-task">;
    me: z.ZodIntersection<z.ZodObject<{
        id: z.ZodNumber;
        name: z.ZodString;
        kind: z.ZodEnum<["external", "eliza", "openserv"]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    }, {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    }>, z.ZodUnion<[z.ZodObject<{
        isBuiltByAgentBuilder: z.ZodLiteral<false>;
    }, "strip", z.ZodTypeAny, {
        isBuiltByAgentBuilder: false;
    }, {
        isBuiltByAgentBuilder: false;
    }>, z.ZodObject<{
        isBuiltByAgentBuilder: z.ZodLiteral<true>;
        systemPrompt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    }, {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    }>]>>;
    task: z.ZodObject<{
        id: z.ZodNumber;
        description: z.ZodString;
        body: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        expectedOutput: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        input: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        dependencies: z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            description: z.ZodString;
            output: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            status: z.ZodEnum<["to-do", "in-progress", "human-assistance-required", "error", "done", "cancelled"]>;
            attachments: z.ZodArray<z.ZodObject<{
                id: z.ZodNumber;
                path: z.ZodString;
                fullUrl: z.ZodString;
                summary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }, {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            status: "error" | "to-do" | "in-progress" | "human-assistance-required" | "done" | "cancelled";
            description: string;
            id: number;
            attachments: {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }[];
            output?: string | null | undefined;
        }, {
            status: "error" | "to-do" | "in-progress" | "human-assistance-required" | "done" | "cancelled";
            description: string;
            id: number;
            attachments: {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }[];
            output?: string | null | undefined;
        }>, "many">;
        humanAssistanceRequests: z.ZodArray<z.ZodIntersection<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"text">;
            question: z.ZodObject<{
                type: z.ZodLiteral<"text">;
                question: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                question: string;
            }, {
                type: "text";
                question: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            question: {
                type: "text";
                question: string;
            };
        }, {
            type: "text";
            question: {
                type: "text";
                question: string;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"project-manager-plan-review">;
            question: z.ZodObject<z.objectUtil.extendShape<{
                tasks: z.ZodArray<z.ZodObject<{
                    index: z.ZodNumber;
                    assigneeAgentId: z.ZodNumber;
                    assigneeAgentName: z.ZodString;
                    taskDescription: z.ZodString;
                    taskBody: z.ZodString;
                    input: z.ZodString;
                    expectedOutput: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }, {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }>, "many">;
            }, {
                type: z.ZodLiteral<"project-manager-plan-review">;
            }>, "strip", z.ZodTypeAny, {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            }, {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "project-manager-plan-review";
            question: {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            };
        }, {
            type: "project-manager-plan-review";
            question: {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"insufficient-balance">;
            question: z.ZodObject<{
                type: z.ZodLiteral<"insufficient-balance">;
            }, "strip", z.ZodTypeAny, {
                type: "insufficient-balance";
            }, {
                type: "insufficient-balance";
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "insufficient-balance";
            question: {
                type: "insufficient-balance";
            };
        }, {
            type: "insufficient-balance";
            question: {
                type: "insufficient-balance";
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"json">;
            question: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            type: "json";
            question?: any;
        }, {
            type: "json";
            question?: any;
        }>]>, z.ZodObject<{
            agentDump: z.ZodUnknown;
            humanResponse: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            id: z.ZodNumber;
            status: z.ZodEnum<["pending", "responded"]>;
        }, "strip", z.ZodTypeAny, {
            status: "pending" | "responded";
            id: number;
            agentDump?: unknown;
            humanResponse?: string | null | undefined;
        }, {
            status: "pending" | "responded";
            id: number;
            agentDump?: unknown;
            humanResponse?: string | null | undefined;
        }>>, "many">;
    }, "strip", z.ZodTypeAny, {
        description: string;
        id: number;
        dependencies: {
            status: "error" | "to-do" | "in-progress" | "human-assistance-required" | "done" | "cancelled";
            description: string;
            id: number;
            attachments: {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }[];
            output?: string | null | undefined;
        }[];
        humanAssistanceRequests: (({
            type: "text";
            question: {
                type: "text";
                question: string;
            };
        } | {
            type: "project-manager-plan-review";
            question: {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            };
        } | {
            type: "insufficient-balance";
            question: {
                type: "insufficient-balance";
            };
        } | {
            type: "json";
            question?: any;
        }) & {
            status: "pending" | "responded";
            id: number;
            agentDump?: unknown;
            humanResponse?: string | null | undefined;
        })[];
        body?: string | null | undefined;
        expectedOutput?: string | null | undefined;
        input?: string | null | undefined;
    }, {
        description: string;
        id: number;
        dependencies: {
            status: "error" | "to-do" | "in-progress" | "human-assistance-required" | "done" | "cancelled";
            description: string;
            id: number;
            attachments: {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }[];
            output?: string | null | undefined;
        }[];
        humanAssistanceRequests: (({
            type: "text";
            question: {
                type: "text";
                question: string;
            };
        } | {
            type: "project-manager-plan-review";
            question: {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            };
        } | {
            type: "insufficient-balance";
            question: {
                type: "insufficient-balance";
            };
        } | {
            type: "json";
            question?: any;
        }) & {
            status: "pending" | "responded";
            id: number;
            agentDump?: unknown;
            humanResponse?: string | null | undefined;
        })[];
        body?: string | null | undefined;
        expectedOutput?: string | null | undefined;
        input?: string | null | undefined;
    }>;
    workspace: z.ZodObject<{
        id: z.ZodNumber;
        goal: z.ZodString;
        bucket_folder: z.ZodString;
        agents: z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            name: z.ZodString;
            capabilities_description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: number;
            capabilities_description: string;
        }, {
            name: string;
            id: number;
            capabilities_description: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    }, {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    }>;
    integrations: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        connection_id: z.ZodString;
        provider_config_key: z.ZodString;
        provider: z.ZodString;
        created: z.ZodString;
        metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        openAPI: z.ZodObject<{
            title: z.ZodString;
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            description: string;
            title: string;
        }, {
            description: string;
            title: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        created: string;
        openAPI: {
            description: string;
            title: string;
        };
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }, {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        created: string;
        openAPI: {
            description: string;
            title: string;
        };
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }>, "many">;
    memories: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        memory: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: number;
        memory: string;
        createdAt: Date;
    }, {
        id: number;
        memory: string;
        createdAt: Date;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "do-task";
    me: {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    } & ({
        isBuiltByAgentBuilder: false;
    } | {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    });
    task: {
        description: string;
        id: number;
        dependencies: {
            status: "error" | "to-do" | "in-progress" | "human-assistance-required" | "done" | "cancelled";
            description: string;
            id: number;
            attachments: {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }[];
            output?: string | null | undefined;
        }[];
        humanAssistanceRequests: (({
            type: "text";
            question: {
                type: "text";
                question: string;
            };
        } | {
            type: "project-manager-plan-review";
            question: {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            };
        } | {
            type: "insufficient-balance";
            question: {
                type: "insufficient-balance";
            };
        } | {
            type: "json";
            question?: any;
        }) & {
            status: "pending" | "responded";
            id: number;
            agentDump?: unknown;
            humanResponse?: string | null | undefined;
        })[];
        body?: string | null | undefined;
        expectedOutput?: string | null | undefined;
        input?: string | null | undefined;
    };
    workspace: {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    };
    integrations: {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        created: string;
        openAPI: {
            description: string;
            title: string;
        };
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }[];
    memories: {
        id: number;
        memory: string;
        createdAt: Date;
    }[];
}, {
    type: "do-task";
    me: {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    } & ({
        isBuiltByAgentBuilder: false;
    } | {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    });
    task: {
        description: string;
        id: number;
        dependencies: {
            status: "error" | "to-do" | "in-progress" | "human-assistance-required" | "done" | "cancelled";
            description: string;
            id: number;
            attachments: {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }[];
            output?: string | null | undefined;
        }[];
        humanAssistanceRequests: (({
            type: "text";
            question: {
                type: "text";
                question: string;
            };
        } | {
            type: "project-manager-plan-review";
            question: {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            };
        } | {
            type: "insufficient-balance";
            question: {
                type: "insufficient-balance";
            };
        } | {
            type: "json";
            question?: any;
        }) & {
            status: "pending" | "responded";
            id: number;
            agentDump?: unknown;
            humanResponse?: string | null | undefined;
        })[];
        body?: string | null | undefined;
        expectedOutput?: string | null | undefined;
        input?: string | null | undefined;
    };
    workspace: {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    };
    integrations: {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        created: string;
        openAPI: {
            description: string;
            title: string;
        };
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }[];
    memories: {
        id: number;
        memory: string;
        createdAt: Date;
    }[];
}>;
export declare const respondChatMessageActionSchema: z.ZodObject<{
    type: z.ZodLiteral<"respond-chat-message">;
    me: z.ZodIntersection<z.ZodObject<{
        id: z.ZodNumber;
        name: z.ZodString;
        kind: z.ZodEnum<["external", "eliza", "openserv"]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    }, {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    }>, z.ZodDiscriminatedUnion<"isBuiltByAgentBuilder", [z.ZodObject<{
        isBuiltByAgentBuilder: z.ZodLiteral<false>;
    }, "strip", z.ZodTypeAny, {
        isBuiltByAgentBuilder: false;
    }, {
        isBuiltByAgentBuilder: false;
    }>, z.ZodObject<{
        isBuiltByAgentBuilder: z.ZodLiteral<true>;
        systemPrompt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    }, {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    }>]>>;
    messages: z.ZodArray<z.ZodObject<{
        author: z.ZodEnum<["agent", "user"]>;
        createdAt: z.ZodDate;
        id: z.ZodNumber;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        id: number;
        createdAt: Date;
        author: "agent" | "user";
    }, {
        message: string;
        id: number;
        createdAt: Date;
        author: "agent" | "user";
    }>, "many">;
    workspace: z.ZodObject<{
        id: z.ZodNumber;
        goal: z.ZodString;
        bucket_folder: z.ZodString;
        agents: z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            name: z.ZodString;
            capabilities_description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: number;
            capabilities_description: string;
        }, {
            name: string;
            id: number;
            capabilities_description: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    }, {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    }>;
    integrations: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        connection_id: z.ZodString;
        provider_config_key: z.ZodString;
        provider: z.ZodString;
        created: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        openAPI: z.ZodObject<{
            title: z.ZodString;
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            description: string;
            title: string;
        }, {
            description: string;
            title: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        openAPI: {
            description: string;
            title: string;
        };
        created?: string | undefined;
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }, {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        openAPI: {
            description: string;
            title: string;
        };
        created?: string | undefined;
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }>, "many">;
    memories: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        memory: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: number;
        memory: string;
        createdAt: Date;
    }, {
        id: number;
        memory: string;
        createdAt: Date;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "respond-chat-message";
    me: {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    } & ({
        isBuiltByAgentBuilder: false;
    } | {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    });
    workspace: {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    };
    integrations: {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        openAPI: {
            description: string;
            title: string;
        };
        created?: string | undefined;
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }[];
    memories: {
        id: number;
        memory: string;
        createdAt: Date;
    }[];
    messages: {
        message: string;
        id: number;
        createdAt: Date;
        author: "agent" | "user";
    }[];
}, {
    type: "respond-chat-message";
    me: {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    } & ({
        isBuiltByAgentBuilder: false;
    } | {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    });
    workspace: {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    };
    integrations: {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        openAPI: {
            description: string;
            title: string;
        };
        created?: string | undefined;
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }[];
    memories: {
        id: number;
        memory: string;
        createdAt: Date;
    }[];
    messages: {
        message: string;
        id: number;
        createdAt: Date;
        author: "agent" | "user";
    }[];
}>;
export declare const actionSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"do-task">;
    me: z.ZodIntersection<z.ZodObject<{
        id: z.ZodNumber;
        name: z.ZodString;
        kind: z.ZodEnum<["external", "eliza", "openserv"]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    }, {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    }>, z.ZodUnion<[z.ZodObject<{
        isBuiltByAgentBuilder: z.ZodLiteral<false>;
    }, "strip", z.ZodTypeAny, {
        isBuiltByAgentBuilder: false;
    }, {
        isBuiltByAgentBuilder: false;
    }>, z.ZodObject<{
        isBuiltByAgentBuilder: z.ZodLiteral<true>;
        systemPrompt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    }, {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    }>]>>;
    task: z.ZodObject<{
        id: z.ZodNumber;
        description: z.ZodString;
        body: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        expectedOutput: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        input: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        dependencies: z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            description: z.ZodString;
            output: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            status: z.ZodEnum<["to-do", "in-progress", "human-assistance-required", "error", "done", "cancelled"]>;
            attachments: z.ZodArray<z.ZodObject<{
                id: z.ZodNumber;
                path: z.ZodString;
                fullUrl: z.ZodString;
                summary: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }, {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            status: "error" | "to-do" | "in-progress" | "human-assistance-required" | "done" | "cancelled";
            description: string;
            id: number;
            attachments: {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }[];
            output?: string | null | undefined;
        }, {
            status: "error" | "to-do" | "in-progress" | "human-assistance-required" | "done" | "cancelled";
            description: string;
            id: number;
            attachments: {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }[];
            output?: string | null | undefined;
        }>, "many">;
        humanAssistanceRequests: z.ZodArray<z.ZodIntersection<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"text">;
            question: z.ZodObject<{
                type: z.ZodLiteral<"text">;
                question: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                type: "text";
                question: string;
            }, {
                type: "text";
                question: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "text";
            question: {
                type: "text";
                question: string;
            };
        }, {
            type: "text";
            question: {
                type: "text";
                question: string;
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"project-manager-plan-review">;
            question: z.ZodObject<z.objectUtil.extendShape<{
                tasks: z.ZodArray<z.ZodObject<{
                    index: z.ZodNumber;
                    assigneeAgentId: z.ZodNumber;
                    assigneeAgentName: z.ZodString;
                    taskDescription: z.ZodString;
                    taskBody: z.ZodString;
                    input: z.ZodString;
                    expectedOutput: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }, {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }>, "many">;
            }, {
                type: z.ZodLiteral<"project-manager-plan-review">;
            }>, "strip", z.ZodTypeAny, {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            }, {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "project-manager-plan-review";
            question: {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            };
        }, {
            type: "project-manager-plan-review";
            question: {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"insufficient-balance">;
            question: z.ZodObject<{
                type: z.ZodLiteral<"insufficient-balance">;
            }, "strip", z.ZodTypeAny, {
                type: "insufficient-balance";
            }, {
                type: "insufficient-balance";
            }>;
        }, "strip", z.ZodTypeAny, {
            type: "insufficient-balance";
            question: {
                type: "insufficient-balance";
            };
        }, {
            type: "insufficient-balance";
            question: {
                type: "insufficient-balance";
            };
        }>, z.ZodObject<{
            type: z.ZodLiteral<"json">;
            question: z.ZodAny;
        }, "strip", z.ZodTypeAny, {
            type: "json";
            question?: any;
        }, {
            type: "json";
            question?: any;
        }>]>, z.ZodObject<{
            agentDump: z.ZodUnknown;
            humanResponse: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            id: z.ZodNumber;
            status: z.ZodEnum<["pending", "responded"]>;
        }, "strip", z.ZodTypeAny, {
            status: "pending" | "responded";
            id: number;
            agentDump?: unknown;
            humanResponse?: string | null | undefined;
        }, {
            status: "pending" | "responded";
            id: number;
            agentDump?: unknown;
            humanResponse?: string | null | undefined;
        }>>, "many">;
    }, "strip", z.ZodTypeAny, {
        description: string;
        id: number;
        dependencies: {
            status: "error" | "to-do" | "in-progress" | "human-assistance-required" | "done" | "cancelled";
            description: string;
            id: number;
            attachments: {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }[];
            output?: string | null | undefined;
        }[];
        humanAssistanceRequests: (({
            type: "text";
            question: {
                type: "text";
                question: string;
            };
        } | {
            type: "project-manager-plan-review";
            question: {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            };
        } | {
            type: "insufficient-balance";
            question: {
                type: "insufficient-balance";
            };
        } | {
            type: "json";
            question?: any;
        }) & {
            status: "pending" | "responded";
            id: number;
            agentDump?: unknown;
            humanResponse?: string | null | undefined;
        })[];
        body?: string | null | undefined;
        expectedOutput?: string | null | undefined;
        input?: string | null | undefined;
    }, {
        description: string;
        id: number;
        dependencies: {
            status: "error" | "to-do" | "in-progress" | "human-assistance-required" | "done" | "cancelled";
            description: string;
            id: number;
            attachments: {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }[];
            output?: string | null | undefined;
        }[];
        humanAssistanceRequests: (({
            type: "text";
            question: {
                type: "text";
                question: string;
            };
        } | {
            type: "project-manager-plan-review";
            question: {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            };
        } | {
            type: "insufficient-balance";
            question: {
                type: "insufficient-balance";
            };
        } | {
            type: "json";
            question?: any;
        }) & {
            status: "pending" | "responded";
            id: number;
            agentDump?: unknown;
            humanResponse?: string | null | undefined;
        })[];
        body?: string | null | undefined;
        expectedOutput?: string | null | undefined;
        input?: string | null | undefined;
    }>;
    workspace: z.ZodObject<{
        id: z.ZodNumber;
        goal: z.ZodString;
        bucket_folder: z.ZodString;
        agents: z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            name: z.ZodString;
            capabilities_description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: number;
            capabilities_description: string;
        }, {
            name: string;
            id: number;
            capabilities_description: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    }, {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    }>;
    integrations: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        connection_id: z.ZodString;
        provider_config_key: z.ZodString;
        provider: z.ZodString;
        created: z.ZodString;
        metadata: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        openAPI: z.ZodObject<{
            title: z.ZodString;
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            description: string;
            title: string;
        }, {
            description: string;
            title: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        created: string;
        openAPI: {
            description: string;
            title: string;
        };
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }, {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        created: string;
        openAPI: {
            description: string;
            title: string;
        };
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }>, "many">;
    memories: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        memory: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: number;
        memory: string;
        createdAt: Date;
    }, {
        id: number;
        memory: string;
        createdAt: Date;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "do-task";
    me: {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    } & ({
        isBuiltByAgentBuilder: false;
    } | {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    });
    task: {
        description: string;
        id: number;
        dependencies: {
            status: "error" | "to-do" | "in-progress" | "human-assistance-required" | "done" | "cancelled";
            description: string;
            id: number;
            attachments: {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }[];
            output?: string | null | undefined;
        }[];
        humanAssistanceRequests: (({
            type: "text";
            question: {
                type: "text";
                question: string;
            };
        } | {
            type: "project-manager-plan-review";
            question: {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            };
        } | {
            type: "insufficient-balance";
            question: {
                type: "insufficient-balance";
            };
        } | {
            type: "json";
            question?: any;
        }) & {
            status: "pending" | "responded";
            id: number;
            agentDump?: unknown;
            humanResponse?: string | null | undefined;
        })[];
        body?: string | null | undefined;
        expectedOutput?: string | null | undefined;
        input?: string | null | undefined;
    };
    workspace: {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    };
    integrations: {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        created: string;
        openAPI: {
            description: string;
            title: string;
        };
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }[];
    memories: {
        id: number;
        memory: string;
        createdAt: Date;
    }[];
}, {
    type: "do-task";
    me: {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    } & ({
        isBuiltByAgentBuilder: false;
    } | {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    });
    task: {
        description: string;
        id: number;
        dependencies: {
            status: "error" | "to-do" | "in-progress" | "human-assistance-required" | "done" | "cancelled";
            description: string;
            id: number;
            attachments: {
                path: string;
                id: number;
                fullUrl: string;
                summary?: string | null | undefined;
            }[];
            output?: string | null | undefined;
        }[];
        humanAssistanceRequests: (({
            type: "text";
            question: {
                type: "text";
                question: string;
            };
        } | {
            type: "project-manager-plan-review";
            question: {
                type: "project-manager-plan-review";
                tasks: {
                    expectedOutput: string;
                    input: string;
                    index: number;
                    assigneeAgentId: number;
                    assigneeAgentName: string;
                    taskDescription: string;
                    taskBody: string;
                }[];
            };
        } | {
            type: "insufficient-balance";
            question: {
                type: "insufficient-balance";
            };
        } | {
            type: "json";
            question?: any;
        }) & {
            status: "pending" | "responded";
            id: number;
            agentDump?: unknown;
            humanResponse?: string | null | undefined;
        })[];
        body?: string | null | undefined;
        expectedOutput?: string | null | undefined;
        input?: string | null | undefined;
    };
    workspace: {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    };
    integrations: {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        created: string;
        openAPI: {
            description: string;
            title: string;
        };
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }[];
    memories: {
        id: number;
        memory: string;
        createdAt: Date;
    }[];
}>, z.ZodObject<{
    type: z.ZodLiteral<"respond-chat-message">;
    me: z.ZodIntersection<z.ZodObject<{
        id: z.ZodNumber;
        name: z.ZodString;
        kind: z.ZodEnum<["external", "eliza", "openserv"]>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    }, {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    }>, z.ZodDiscriminatedUnion<"isBuiltByAgentBuilder", [z.ZodObject<{
        isBuiltByAgentBuilder: z.ZodLiteral<false>;
    }, "strip", z.ZodTypeAny, {
        isBuiltByAgentBuilder: false;
    }, {
        isBuiltByAgentBuilder: false;
    }>, z.ZodObject<{
        isBuiltByAgentBuilder: z.ZodLiteral<true>;
        systemPrompt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    }, {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    }>]>>;
    messages: z.ZodArray<z.ZodObject<{
        author: z.ZodEnum<["agent", "user"]>;
        createdAt: z.ZodDate;
        id: z.ZodNumber;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        id: number;
        createdAt: Date;
        author: "agent" | "user";
    }, {
        message: string;
        id: number;
        createdAt: Date;
        author: "agent" | "user";
    }>, "many">;
    workspace: z.ZodObject<{
        id: z.ZodNumber;
        goal: z.ZodString;
        bucket_folder: z.ZodString;
        agents: z.ZodArray<z.ZodObject<{
            id: z.ZodNumber;
            name: z.ZodString;
            capabilities_description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id: number;
            capabilities_description: string;
        }, {
            name: string;
            id: number;
            capabilities_description: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    }, {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    }>;
    integrations: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        connection_id: z.ZodString;
        provider_config_key: z.ZodString;
        provider: z.ZodString;
        created: z.ZodOptional<z.ZodString>;
        metadata: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodUnknown>>>>;
        scopes: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        openAPI: z.ZodObject<{
            title: z.ZodString;
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            description: string;
            title: string;
        }, {
            description: string;
            title: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        openAPI: {
            description: string;
            title: string;
        };
        created?: string | undefined;
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }, {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        openAPI: {
            description: string;
            title: string;
        };
        created?: string | undefined;
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }>, "many">;
    memories: z.ZodArray<z.ZodObject<{
        id: z.ZodNumber;
        memory: z.ZodString;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: number;
        memory: string;
        createdAt: Date;
    }, {
        id: number;
        memory: string;
        createdAt: Date;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "respond-chat-message";
    me: {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    } & ({
        isBuiltByAgentBuilder: false;
    } | {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    });
    workspace: {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    };
    integrations: {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        openAPI: {
            description: string;
            title: string;
        };
        created?: string | undefined;
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }[];
    memories: {
        id: number;
        memory: string;
        createdAt: Date;
    }[];
    messages: {
        message: string;
        id: number;
        createdAt: Date;
        author: "agent" | "user";
    }[];
}, {
    type: "respond-chat-message";
    me: {
        name: string;
        id: number;
        kind: "external" | "eliza" | "openserv";
    } & ({
        isBuiltByAgentBuilder: false;
    } | {
        isBuiltByAgentBuilder: true;
        systemPrompt: string;
    });
    workspace: {
        id: number;
        goal: string;
        bucket_folder: string;
        agents: {
            name: string;
            id: number;
            capabilities_description: string;
        }[];
    };
    integrations: {
        id: number;
        connection_id: string;
        provider_config_key: string;
        provider: string;
        openAPI: {
            description: string;
            title: string;
        };
        created?: string | undefined;
        metadata?: Record<string, unknown> | null | undefined;
        scopes?: string[] | undefined;
    }[];
    memories: {
        id: number;
        memory: string;
        createdAt: Date;
    }[];
    messages: {
        message: string;
        id: number;
        createdAt: Date;
        author: "agent" | "user";
    }[];
}>]>;
declare const agentChatMessagesResponseSchema: z.ZodObject<{
    agent: z.ZodObject<{
        id: z.ZodNumber;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id: number;
    }, {
        name: string;
        id: number;
    }>;
    messages: z.ZodArray<z.ZodObject<{
        author: z.ZodEnum<["agent", "user"]>;
        createdAt: z.ZodDate;
        id: z.ZodNumber;
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
        id: number;
        createdAt: Date;
        author: "agent" | "user";
    }, {
        message: string;
        id: number;
        createdAt: Date;
        author: "agent" | "user";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    messages: {
        message: string;
        id: number;
        createdAt: Date;
        author: "agent" | "user";
    }[];
    agent: {
        name: string;
        id: number;
    };
}, {
    messages: {
        message: string;
        id: number;
        createdAt: Date;
        author: "agent" | "user";
    }[];
    agent: {
        name: string;
        id: number;
    };
}>;
export type AgentChatMessagesResponse = z.infer<typeof agentChatMessagesResponseSchema>;
export interface GetFilesParams {
    workspaceId: number;
}
export interface GetSecretsParams {
    workspaceId: number;
}
export interface GetSecretValueParams {
    workspaceId: number;
    secretId: number;
}
export declare const getFilesParamsSchema: z.ZodObject<{
    workspaceId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    workspaceId: number;
}, {
    workspaceId: number;
}>;
export interface UploadFileParams {
    workspaceId: number;
    path: string;
    taskIds?: number[] | number | null;
    skipSummarizer?: boolean;
    file: Buffer | string;
}
export interface DeleteFileParams {
    workspaceId: number;
    fileId: number;
}
export interface MarkTaskAsErroredParams {
    workspaceId: number;
    taskId: number;
    error: string;
}
export interface CompleteTaskParams {
    workspaceId: number;
    taskId: number;
    output: string;
}
export interface SendChatMessageParams {
    workspaceId: number;
    agentId: number;
    message: string;
}
export interface GetTaskDetailParams {
    workspaceId: number;
    taskId: number;
}
export interface GetAgentsParams {
    workspaceId: number;
}
export interface GetChatMessagesParams {
    workspaceId: number;
    agentId: number;
}
export interface GetTasksParams {
    workspaceId: number;
}
export interface CreateTaskParams {
    workspaceId: number;
    assignee: number;
    description: string;
    body: string;
    input: string;
    expectedOutput: string;
    dependencies: number[];
}
export interface AddLogToTaskParams {
    workspaceId: number;
    taskId: number;
    severity: 'info' | 'warning' | 'error';
    type: 'text' | 'openai-message';
    body: string | object;
}
export interface RequestHumanAssistanceParams {
    workspaceId: number;
    taskId: number;
    type: 'text' | 'project-manager-plan-review';
    question: string | object;
    agentDump?: object;
}
export interface UpdateTaskStatusParams {
    workspaceId: number;
    taskId: number;
    status: TaskStatus;
}
export interface ProcessParams {
    messages: ChatCompletionMessageParam[];
}
export interface ProxyConfiguration {
    endpoint: string;
    providerConfigKey?: string;
    connectionId?: string;
    method?: 'GET' | 'POST' | 'PATCH' | 'PUT' | 'DELETE' | 'get' | 'post' | 'patch' | 'put' | 'delete';
    headers?: Record<string, string>;
    params?: string | Record<string, string | number>;
    data?: unknown;
    retries?: number;
    baseUrlOverride?: string;
    decompress?: boolean;
    responseType?: 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream';
    retryOn?: number[] | null;
}
export interface IntegrationCallRequest {
    workspaceId: number;
    integrationId: string;
    details: ProxyConfiguration;
}
export {};
//# sourceMappingURL=types.d.ts.map